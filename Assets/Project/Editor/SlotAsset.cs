using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using Mkey;
using UnityEngine.Events;
using UnityEngine.UI;
using System;

namespace Slot.Editor
{
    [CreateAssetMenu(fileName = "Slot", menuName = "Slot", order = 51)]
    public class SlotAsset : ScriptableObject
    {

        #region SlotController
        public List<SlotIcon> slotIcons;
        public List<PayLine> payLines;
        
        public List<SlotGroupSetting> slotGroups = new List<SlotGroupSetting>() ;
        public RTPSetting rtp;

        public List<int> slotIcontab;

        public int scatter_id;
        public int wild_id;
        public int wild_multiply = 1;
        public bool useWild;
        public bool useScatter;
        public bool scatterWildSub;
        public bool scatterFollowSeq;

        public bool useSpecialIcon;
        public bool specialIconWildSub;
        public bool specialIconFollowSeq;
        public int specialIcon_id;
        public List<SpecialIconPay> specialIconPayTable = new List<SpecialIconPay>();
        public List<ScatterPay> scatterPayTable = new List<ScatterPay>();
        public List<WildPay> wildPayTable = new List<WildPay>();
        public bool disableBonusOnFeature = false;
        public int numberOfBonusPick = 4;
        public int numberOfMinBonusPick = 4;
        public int initialMultiplyWin = 1;

        public GameObject soundGameObj;
        public GameObject bonusGameObj;
        public int initialFreeSpinWin = 0;

        public int initialMultiplyWinByBet = 0;
        public List<BonusGameChoicesType> bonusChoices = new List<BonusGameChoicesType>();

        public int featureMultiply = 3;

        public float mainRotateTime;
        public int specialEffectTime = 1;
        public float forceStopTime = 0.3f;
        public bool useARCbetSystem = false;
        public bool enableSpecialEffectDuringAuto = false;
        public bool enableDisplayWinInfoOnFeature = false;
        public bool disableDisplayStandardWinOnFeature = false;
        public bool onlyAddCoinOnEndFeature = false;
        public bool enableDisplayWinLineOnAuto = false;
        public bool enableDisplayZeroFreespin = false;
        public bool usePresetBet = false;
        public List<double> presetBetIncrease = new List<double>();
        public bool enableStartPresetBet = false;
        public int currentSelectedPresetId = 0;
        public int gameId;

        public SqlType typeOfSql;
       

        public Vector2 tileSize;
        #endregion SlotController

        #region UI Setting
        public List<ImageSetting> uiGeneralImagesSetting = new List<ImageSetting>();
        public List<UiGameobjectSetting> uiGeneralGameobjSetting = new List<UiGameobjectSetting>();
        public List<UiTextSetting> uiGeneralTextSetting = new List<UiTextSetting>();
        public UiButtonSetting
        LinePlus, LineMinus, BetPlus, BetMinus, Back, Menu, AutoSpin, Spin;
        public List<LineSetting> listOfLineSetting = new List<LineSetting>();
        public LineAutoGenerateDetail lineAutoSetting;
        public List<HelpPageGroup> helpGroup = new List<HelpPageGroup>();

        public string decimalDisplay = "n2";


        #endregion UI Setting
        [SerializeField]
        string lastSave;
        SerializedObject slotSerialized;
        public bool enableRandomIconOnStart = false;

        public Vector2 ARChelpInfoSize;
        public List<Sprite> ARChelpInfoSprites;

        public string LastSave { get => lastSave; set => lastSave = value; }

        public void Save()
        {
            if (slotSerialized == null)
            {
                slotSerialized = new SerializedObject(this);
            }
            slotSerialized.ApplyModifiedProperties();
        }

        public SerializedObject GetSerializedObj()
        {
            if (slotSerialized == null)
            {
                slotSerialized = new SerializedObject(this);
            }

            return slotSerialized;
        }
    }
    
    [Serializable]
    public class RTPSetting
    {
        public List<List<ProbabilitySlotIcon>> col = new List<List<ProbabilitySlotIcon>>();
        

       public RTPSetting()
        {
            col = new List<List<ProbabilitySlotIcon>>();

        }
    }
    
    [Serializable]
    public class SlotGroupSetting
    {
        public List<int> symbOrder;
        public List<int> symbOrderFeature;
        public int additionalSpinBeforeStop;
        public TransfomSetting transSetting;
        public TransfomSetting maskingTransSetting;
        public TransfomSetting specialEffectTransSetting;
        public bool changeMaskingTrans = false;
       
        public List<TransfomSetting> listOfRayCastTrans;
    

        public SlotGroupSetting()
        {
            symbOrder = new List<int>();
            symbOrderFeature = new List<int>();
            transSetting = new TransfomSetting();
            maskingTransSetting = new TransfomSetting();
            specialEffectTransSetting = new TransfomSetting();
            listOfRayCastTrans = new List<TransfomSetting>();
           
           
        }
        
    }
    
    [System.Serializable]
    public class LineAutoGenerateDetail
    {
        public Material lineMaterial;

        public Color lineColor = Color.white;

        public float lineFlashingSpeed = 1f;

        public float lineRendererWidth = 0.2f;
        public float lineSpeed = 100f;

        public WinningBoxSequenceType typeOfBoxWinning = WinningBoxSequenceType.Always_Display;
        public float boxSizeWidth = 4.1f;
        public float boxSizeHeight = 3.13f;
    }
    
    [Serializable]
    public class TransfomSetting
    {
        public Vector3 position;
        public Vector3 rotation;
        public Vector3 scale;
        public TransfomSetting()
        {
           
        }
        public TransfomSetting(Transform trans)
        {
            this.position = trans.localPosition;
            this.rotation = trans.localEulerAngles;
            this.scale = trans.localScale;
        }
    }

    [Serializable]
    public class ProbabilitySlotIcon
    {
        public int slotIconId;
        public float percentage;

    }
    public enum SqlType
    {
        NonFeatureOnly,
        FeatureOnly,
        All
    }
}
